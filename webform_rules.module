<?php

/**
 * @file
 * Adds rules integration for webform submissions.
 */

/**
 * Implements of hook_form_alter().
 */
function webform_rules_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') !== FALSE) {
    // Add custom submit handler to webform form.
    $form['#submit'][] = 'webform_rules_client_form_submit';
  }
}

/**
 * Custom submit handler for webform submissions.
 */
function webform_rules_client_form_submit($form, &$form_state) {
  // Include submission functions from webform.
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  // Get submitted form values.
  $values = $form_state['values'];
  // Check if user is submitting as a draft.
  $is_draft = $values['op'] == t('Save Draft');
  // Get webform node.
  $node = $form['#node'];
  // Save submission id.
  $node->webform['sid'] = $is_draft ? '' : $values['details']['sid'];
  // Get submitted data from webform.
  $submission_data = webform_submission_data($node, $values['submitted']);
  // Invoke event.
  webform_rules_rules_invoke_event($submission_data, $node, $is_draft);
}

/**
 * Invoke rules event with submitted data.
 *
 * @param $submission_data
 *   Data from webform prepared by webform_submission_data().
 * @param $node
 *   The submitted webform node.
 * @param $is_draft
 *   TRUE if the webform is saved as draft, otherwise FALSE. Defaults to FALSE.
 */
function webform_rules_rules_invoke_event($submission_data, $node, $is_draft = FALSE) {
  global $user;
  if (!is_array($submission_data) || count($submission_data) == 0) {
    return;
  }
  $webform = $node->webform;
  $data = array(
    'sid' => $webform['sid'],
    'components' => array(),
  );
  $form_id = 'webform-client-form-' . $webform['nid'];
  // Map values to field names.
  foreach ($submission_data as $cid => $value) {
    $component = $webform['components'][$cid];
    $data['components'][$component['form_key']]['value'] = $value['value'];
    $data['components'][$component['form_key']]['component'] = $component;
  }
  // Invoke the rules event.
  if ($is_draft) {
    rules_invoke_event('webform_rules_submit_as_draft', $user, $node, $data, $form_id);
  }
  else {
    rules_invoke_event('webform_rules_submit', $user, $node, $data, $form_id);
  }
}

/**
 * Implements hook_token_info().
 */
function webform_rules_token_info() {
  $types['webform'] = array(
    'name' => t('Webform data'),
    'description' => t('Tokens related to data submitted by webforms.'),
  );

  $webform['sid'] = array(
    'name' => t('Submission Id'),
    'description' => t('The unique identifier of the submission.'),
  );
  $webform['data'] = array(
    'name' => t('Submitted data'),
    'description' => t('The submitted webform data.'),
  );
  $webform['data-raw'] = array(
    'name' => t('Raw submitted data'),
    'description' => t('The unfiltered submitted webform data.'),
  );
  $webform['{component}-title'] = array(
    'name' => t('Component title'),
    'description' => t('The title of the selected component, e.g. "email-title".'),
  );
  $webform['{component}-value'] = array(
    'name' => t('Component value'),
    'description' => t('The value of the selected component, e.g. "email-value".'),
  );
  $webform['{component}-value-html'] = array(
    'name' => t('Component value as html'),
    'description' => t('The value of the selected component rendered as html, e.g. "email-value-html".'),
  );
  $webform['{component}-value-raw'] = array(
    'name' => t('Raw component value'),
    'description' => t('The title of the selected component, e.g. "email-title".'),
  );
  $webform['{component}-display'] = array(
    'name' => t('Component display'),
    'description' => t('Title and value of the selected component, e.g. "email-display".'),
  );
  $webform['{component}-display-html'] = array(
    'name' => t('Component display as html'),
    'description' => t('Title and value of the selected component rendered as html, e.g. "email-display-html".'),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'webform' => $webform,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function webform_rules_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'webform') {
    $component_names = array_keys($data[$type]['components']);
    foreach ($tokens as $name => $original) {
      if ($name == 'sid') {
        $replacements[$original] = $data[$type]['sid'];
      }
      elseif ($name == 'data') {
        $replacements[$original] = webform_rules_prepare_component_value($data[$type]);
      }
      elseif ($name == 'data-raw') {
        $replacements[$original] = webform_rules_prepare_component_value($data[$type], TRUE);
      }
      else {
        // Split token name to get the components name.
        $token = explode('-', $name);
        $component_name = array_shift($token);
        if (!in_array($component_name, $component_names)) {
          continue;
        }
        // Join token name (without component name).
        $token = implode('-', $token);
        // Webform component.
        $component = $data[$type]['components'][$component_name]['component'];
        $component_value = $data[$type]['components'][$component_name]['value'];
        switch ($token) {
          case 'title':
            $replacements[$original] = $component['name'];
            break;
          case 'display':
            $replacements[$original] = webform_rules_render_component($component, $component_value);
            break;
          case 'display-html':
            $replacements[$original] = webform_rules_render_component($component, $component_value, 'html');
            break;
          case 'value':
            $replacements[$original] = webform_rules_render_component($component, $component_value, 'text', FALSE);
            break;
          case 'value-html':
            $replacements[$original] = webform_rules_render_component($component, $component_value, 'html', FALSE);
            break;
          case 'value-raw':
            $replacements[$original] = webform_rules_prepare_component_value($component_value, TRUE);
            break;
        }
      }
    }
  }
  return $replacements;
}

/**
 * Prepare component value for output.
 * Code adapted from drupal_to_js().
 *
 * @param $component_value
 *   Value of submitted component.
 * @param $raw
 *   If TRUE, leave all values unfiltered.
 */
function webform_rules_prepare_component_value($component_value, $raw = FALSE) {
  switch (gettype($component_value)) {
    case 'boolean':
      return $component_value ? 'true' : 'false'; // Lowercase necessary!
    case 'integer':
    case 'double':
      return $component_value;
    case 'resource':
    case 'string':
      return $raw ? $component_value : check_plain($component_value);
    case 'array':
      // If the array is empty or if it has sequential whole number keys
      // starting with 0, it's not associative so we can go ahead and
      // convert it as an array.
      if (empty($component_value) || array_keys($component_value) === range(0, sizeof($component_value) - 1)) {
        $output = array();
        foreach ($component_value as $v) {
          $output[] = webform_rules_prepare_component_value($v, $raw);
        }
        return implode(', ', $output);
      }
    // Otherwise, fall through to convert the array as an object.
    // This is usefull for more readable output.
    case 'object':
      $output = array();
      foreach ($component_value as $k => $v) {
        $output[] = webform_rules_prepare_component_value(strval($k), $raw) . ': ' . webform_rules_prepare_component_value($v, $raw);
      }
      return implode(', ', $output);
    default:
      return 'null';
  }
}

/**
 * Render value of component.
 *
 * @param $component
 *   Webform component to render.
 * @param $value
 *   Submitted value of webform component.
 * @param $format
 *   How to render the components value ('html' or 'text'). Defaults to 'text'.
 * @param $title
 *   Renders the component title if set to TRUE.
 *
 * @return
 *   The rendered component value.
 */
function webform_rules_render_component($component, $value, $format = 'text', $title = TRUE) {
  if ($format != 'text') {
    $format = 'html';
  }
  $display_element = webform_component_invoke($component['type'], 'display', $component, $value, $format);
  $display_element['#parents'] = array('submitted', $component['form_key']);
  if (!isset($display_element['#id'])) {
    $display_element['#id'] = drupal_clean_css_identifier('edit-' . implode('-', $display_element['#parents']));
  }
  if (!$title) {
    $display_element['#title'] = NULL;
  }
  return drupal_render($display_element);
}
